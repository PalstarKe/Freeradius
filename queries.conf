
#auto_escape = yes
safe_characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /"

#######################################################################
#  Query config:  Username
#######################################################################

sql_user_name = "%{User-Name}"

#######################################################################
#  Query config:  Event-Timestamp
#######################################################################

event_timestamp_epoch = "%{%{integer:Event-Timestamp}:-%l}"

event_timestamp = "FROM_UNIXTIME(${event_timestamp_epoch})"

#######################################################################
# Default profile
#######################################################################
#default_user_profile = "DEFAULT"

#######################################################################
# NAS Query
#######################################################################
# This query retrieves the radius clients
#
# 0. Row ID (currently unused)
# 1. Name (or IP address)
# 2. Shortname
# 3. Type
# 4. Secret
# 5. Server
#######################################################################

client_query = "\
	SELECT id, nasname, shortname, type, secret, server \
	FROM ${client_table}"

#######################################################################
# Authorization Queries
#######################################################################

authorize_check_query = "\
	SELECT id, username, attribute, value, op \
	FROM ${authcheck_table} \
	WHERE username = '%{SQL-User-Name}' \
	ORDER BY id"

authorize_reply_query = "\
	SELECT id, username, attribute, value, op \
	FROM ${authreply_table} \
	WHERE username = '%{SQL-User-Name}' \
	ORDER BY id"

group_membership_query = "\
	SELECT groupname \
	FROM ${usergroup_table} \
	WHERE username = '%{SQL-User-Name}' \
	ORDER BY priority"

authorize_group_check_query = "\
	SELECT id, groupname, attribute, \
	Value, op \
	FROM ${groupcheck_table} \
	WHERE groupname = '%{${group_attribute}}' \
	ORDER BY id"

authorize_group_reply_query = "\
	SELECT id, groupname, attribute, \
	value, op \
	FROM ${groupreply_table} \
	WHERE groupname = '%{${group_attribute}}' \
	ORDER BY id"

#######################################################################
# Simultaneous Use Checking Queries
#######################################################################

simul_count_query = "\
	SELECT COUNT(*) \
	FROM ${acct_table1} \
	WHERE username = '%{SQL-User-Name}' \
	AND acctstoptime IS NULL \
	AND created_by = (SELECT created_by FROM customers WHERE username = '%{SQL-User-Name}')"

simul_verify_query = "\
	SELECT \
		radacctid, acctsessionid, username, nasipaddress, nasportid, framedipaddress, \
		callingstationid, framedprotocol \
	FROM ${acct_table1} \
	WHERE username = '%{SQL-User-Name}' \
	AND acctstoptime IS NULL"

#######################################################################
# Accounting and Post-Auth Queries
#######################################################################
accounting {
	reference = "%{tolower:type.%{%{Acct-Status-Type}:-%{Request-Processing-Stage}}.query}"

	column_list = "\
		acctsessionid, acctuniqueid, username, \
		realm, nasipaddress, nasportid, \
		nasporttype, acctstarttime, acctupdatetime, \
		acctstoptime, acctsessiontime, acctauthentic, \
		connectinfo_start, connectinfo_stop, acctinputoctets, \
		acctoutputoctets, calledstationid, callingstationid, \
		acctterminatecause, servicetype, framedprotocol, \
		framedipaddress, framedipv6address, framedipv6prefix, \
		framedinterfaceid, delegatedipv6prefix, created_by"

	type {
		accounting-on {
			query = "\
				UPDATE ${....acct_table1} \
				SET \
					acctstoptime = ${....event_timestamp}, \
					acctsessiontime = '${....event_timestamp_epoch}' - UNIX_TIMESTAMP(acctstarttime), \
					acctterminatecause = '%{%{Acct-Terminate-Cause}:-NAS-Reboot}' \
				WHERE acctstoptime IS NULL \
				AND nasipaddress = '%{NAS-IP-Address}' \
				AND acctstarttime <= ${....event_timestamp}"
		}

		accounting-off {
			query = "${..accounting-on.query}"
		}

		post-auth {
			query = "\
				INSERT INTO ${....acct_table1} (${...column_list}) VALUES (\
					'%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', \
					'%{Realm}', '%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
					NULLIF('%{%{NAS-Port-ID}:-%{NAS-Port}}', ''), \
					'%{NAS-Port-Type}', ${....event_timestamp}, NULL, NULL, 0, \
					'', '%{Connect-Info}', NULL, 0, 0, '%{Called-Station-Id}', \
					'%{Calling-Station-Id}', '', '%{Service-Type}', NULL, \
					'', '', '', '', \
					(SELECT created_by FROM nas WHERE nasname = '%{NAS-IP-Address}' LIMIT 1))"
		}

		start {
			query = "\
				INSERT INTO ${....acct_table1} (${...column_list}) VALUES (\
					'%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', \
					'%{Realm}', '%{NAS-IP-Address}', \
					NULLIF('%{%{NAS-Port-ID}:-%{NAS-Port}}', ''), \
					'%{NAS-Port-Type}', ${....event_timestamp}, ${....event_timestamp}, \
					NULL, NULL, '%{Acct-Authentic}', '%{Connect-Info}', NULL, 0, 0, \
					'%{Called-Station-Id}', '%{Calling-Station-Id}', '', '%{Service-Type}', \
					'%{Framed-Protocol}', '%{Framed-IP-Address}', '%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', '%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}', \
					(SELECT created_by FROM nas WHERE nasname = '%{NAS-IP-Address}' LIMIT 1))"
		}

		interim-update {
			query = "\
				UPDATE ${....acct_table1} SET \
					acctupdatetime = (@acctupdatetime_old := acctupdatetime), \
					acctupdatetime = ${....event_timestamp}, \
					acctinterval = ${....event_timestamp_epoch} - UNIX_TIMESTAMP(@acctupdatetime_old), \
					acctstoptime = NULL, \
					framedipaddress = '%{Framed-IP-Address}', \
					framedipv6address = '%{Framed-IPv6-Address}', \
					framedipv6prefix = '%{Framed-IPv6-Prefix}', \
					framedinterfaceid = '%{Framed-Interface-Id}', \
					delegatedipv6prefix = '%{Delegated-IPv6-Prefix}', \
					acctsessiontime = %{%{Acct-Session-Time}:-NULL}, \
					acctinputoctets = '%{%{Acct-Input-Gigawords}:-0}' << 32 | '%{%{Acct-Input-Octets}:-0}', \
					acctoutputoctets = '%{%{Acct-Output-Gigawords}:-0}' << 32 | '%{%{Acct-Output-Octets}:-0}' \
				WHERE AcctUniqueId = '%{Acct-Unique-Session-Id}'"
		}

		stop {
			query = "\
				UPDATE ${....acct_table2} SET \
					acctstoptime = ${....event_timestamp}, \
					acctsessiontime = %{%{Acct-Session-Time}:-NULL}, \
					acctinputoctets = '%{%{Acct-Input-Gigawords}:-0}' << 32 | '%{%{Acct-Input-Octets}:-0}', \
					acctoutputoctets = '%{%{Acct-Output-Gigawords}:-0}' << 32 | '%{%{Acct-Output-Octets}:-0}', \
					acctterminatecause = '%{Acct-Terminate-Cause}', \
					connectinfo_stop = '%{Connect-Info}' \
				WHERE AcctUniqueId = '%{Acct-Unique-Session-Id}'"
		}
	}

	accounting {
		query = "SELECT true"
	}
}



#######################################################################
# Authentication Logging Queries
#######################################################################
# postauth_query	- Insert some info after authentication
#######################################################################

post-auth {
	query = "\
		INSERT INTO ${..postauth_table} \
			(username, pass, reply, nasipaddress, nasportid, mac, auth_type, acctuniqueid, created_by, authdate ${..class.column_name}) \
		VALUES ( \
			'%{SQL-User-Name}', \
			'%{%{User-Password}:-%{Chap-Password}}', \
			'%{reply:Packet-Type} - %{reply:Reply-Message}', \
			'%{NAS-IP-Address}', \
			'%{%{NAS-Port-Id}:-%{NAS-Port}}', \
			'%{Calling-Station-Id}', \
			'%{Auth-Type}', \
			'%{Acct-Unique-Session-Id}', \
			(SELECT created_by FROM nas WHERE nasname = '%{NAS-IP-Address}' LIMIT 1), \
			NOW() \
			${..class.reply_xlat})"
}

