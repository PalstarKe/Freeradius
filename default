######################################################################
server default {

	listen {
		type = auth
		# ipv4addr = *
		# ipv6addr = *
		ipaddr = *
		port = 0
		#interface = eth0
		# clients = per_socket_clients
		# recv_buff = 65536
		limit {
			max_connections = 16
			lifetime = 0
			idle_timeout = 30
		}
	}

	listen {
		ipaddr = *
		# ipv6addr = ::
		port = 0
		type = acct
		# interface = eth0
		# clients = per_socket_clients

		limit {
			# max_pps = 0
			# idle_timeout = 0
			# lifetime = 0
			# max_connections = 0
		}
	}

	# IPv6 versions of the above - read their full config to understand options
	listen {
		type = auth
		ipv6addr = ::	# any.  ::1 == localhost
		port = 0
		# interface = eth0
		# clients = per_socket_clients
		limit {
			max_connections = 0
			lifetime = 0
			idle_timeout = 0
		}
	}

	listen {
		ipv6addr = ::
		port = 0
		type = acct
		# interface = eth0
		# clients = per_socket_clients

		limit {
			# max_pps = 0
			# idle_timeout = 0
			# lifetime = 0
			# max_connections = 0
		}
	}

	authorize {
		preprocess
		auth_log
		chap
		mschap
		digest
		suffix
		eap {
			ok = return
		}
		sql

		# 1. Get tenant ID
		# Get tenant ID from NAS table by matching nasipaddress
		update control {
			Tmp-Tenant-ID := "%{sql:SELECT created_by FROM nas WHERE nasname = '%{NAS-IP-Address}' LIMIT 1}"
		}
			
		# Set site for the correct customer if not already set
		if ("%{sql:SELECT COUNT(*) FROM customers WHERE username = '%{User-Name}' AND site IS NULL AND created_by = '%{control:Tmp-Tenant-ID}'}" > 0) {
			update control {
				Tmp-Set-Site := "%{sql:UPDATE customers SET site = '%{NAS-IP-Address}' WHERE username = '%{User-Name}' AND site IS NULL AND created_by = '%{control:Tmp-Tenant-ID}'}"
			}
		}

		# 2. Get plan + max customers
		update control {
			Tmp-Plan-ID := "%{sql:SELECT plan FROM users WHERE id = '%{control:Tmp-Tenant-ID}' LIMIT 1}"
			Tmp-Max-Customers := "%{sql:SELECT max_customers FROM plans WHERE id = '%{control:Tmp-Plan-ID}'}"
		}

		# Update radacct to handle stale sessions.
		if ("%{sql:UPDATE radacct set acctstoptime=ADDDATE(acctstarttime, INTERVAL acctsessiontime SECOND), acctterminatecause='Clear Stale Session' WHERE username='%{User-Name}' AND callingstationid='%{Calling-Station-Id}' AND acctstoptime is NULL AND created_by = '%{control:Tmp-Tenant-ID}'}") {
			
			# Reply with a message to indicate the stale session has been cleared.
			update reply {
				Reply-Message := "Disconnect Duplicate User & Clear Stale Session"
			}

			# Disconnect the user if they have the same username & MAC online. 
			update disconnect {
				User-Name = "%{request:User-Name}"
				Calling-Station-Id = "%{Calling-Station-Id}"
				Framed-IP-Address = "%{Framed-IP-Address}"
			}
		}

		logintime
		pap

		Autz-Type New-TLS-Connection {
			ok
		}
		
		## Check User
		if("%{sql:SELECT COUNT(*) as user_found FROM customers WHERE username='%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}'}" >= 1){
			# 3. Get service type & override flag
			update control {
				Tmp-Is-Override := "%{sql:SELECT is_override FROM customers WHERE username = '%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}'}"
			}

			if ("&control:Tmp-Service" == "") {
				if ("%{tolower:%{Framed-Protocol}}" == "ppp") {
					update control {
						Tmp-Service := "pppoe"
					}
				} else {
					update control {
						Tmp-Service := "hotspot"
					}
				}
			}

			# 4. Apply override if enabled
			update reply {
				Mikrotik-Rate-Limit := "%{sql:SELECT IF(is_override = 1 AND override_upload IS NOT NULL AND override_download IS NOT NULL, CONCAT(override_upload, override_upload_unit, '/', override_download, override_download_unit), (SELECT CONCAT(p.upload_speed, p.upload_unit, '/', p.download_speed, p.download_unit) FROM packages p JOIN customers c2 ON c2.package_id = p.id WHERE c2.username = '%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}' LIMIT 1)) FROM customers WHERE username = '%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}' LIMIT 1}"
				Reply-Message := "%{sql:SELECT IF(is_override = 1 AND override_upload IS NOT NULL AND override_download IS NOT NULL, 'Override plan active', 'Package plan active') FROM customers WHERE username = '%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}' LIMIT 1}"
			}

			# 5. Expiry check
			if ("%{sql:SELECT IF((expiry < NOW() AND (extension_expiry IS NULL OR extension_expiry < NOW())), 1, 0) FROM customers WHERE username = '%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}' LIMIT 1}" == "1") {
			
				if ("%{tolower:%{control:Tmp-Service}}" == "pppoe") {
					update control {
						Tmp-Group-Name := "Expired_Plan"
						Expired-Pool := "EXPIRED_POOL"
					}
					update reply {
						Reply-Message := "Account expired. Expired plan applied."
						Framed-Pool := "%{control:Expired-Pool}"
					}
					accept
				}
			
				update reply {
					Reply-Message := "Your account has expired. Please renew."
				}
				reject
			}

			# 6. Tenant customer limit check
			if ("&control:Tmp-Max-Customers" != "-1") {
				update control {
						Tmp-Online := "%{sql:SELECT COUNT(*) FROM radacct WHERE created_by = '%{control:Tmp-Tenant-ID}' AND acctstoptime IS NULL}"
				}

				if ("%{control:Tmp-Online}" >= "%{control:Tmp-Max-Customers}") {
						if ("%{tolower:%{control:Tmp-Service}}" == "pppoe") {
							update control {
								Tmp-Group-Name := "Disabled_plan"
								Disabled-Pool := "DISABLED_POOL"
						}
						update reply {
							Reply-Message := "Customer limit reached. Added to Disabled Pool."
							Framed-Pool := "%{control:Disabled-Pool}"
						}
						accept
					}

					update reply {
						Reply-Message := "Your ISP customer limit has been reached. Please try later."
					}
					reject
				}
			}

			## Add Unknown Users to Disabled Pool
			if ("%{sql:SELECT COUNT(*) FROM customers c INNER JOIN nas n ON c.created_by = n.created_by WHERE c.username='%{User-Name}' AND n.nasname='%{NAS-IP-Address}'}" > 0) {
				# User exists and belongs to the same created_by as the NAS
				ok
			} else {
				update control {
					Disabled-Pool := "DISABLED_POOL"
					Tmp-String-0 := "%{sql:INSERT INTO radusergroup (username, groupname, priority, created_by) VALUES ('%{User-Name}', 'Disabled_Plan', 1, '%{control:Tmp-Tenant-ID}')}"
				}
				if (&control:Disabled-Pool && &control:Disabled-Pool != "") {
					ok
					update reply {
						Reply-Message := "User Not Found - assigned to Disabled Pool - %{control:Disabled-Pool}"
						Framed-Pool := "%{control:Disabled-Pool}"
					}
				} else { 
					update reply {
						Reply-Message := "Disabled Pool Not Found"
					}
					reject
				}
			}

			# Check if mac_lock is enabled for this user
			if ("%{sql:SELECT IF(maclock = 1, 1, 0) as maclock_status FROM customers WHERE username='%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}'}" == 1) {
				update control {
					Disabled-Pool := "DISABLED_POOL"
				}
				# Check if the mac_address is empty or NULL. If yes, insert Calling-Station-Id into mac_address
				if ("%{sql:SELECT IF(mac_address IS NULL OR mac_address = '', 1, 0) as mac_address_status FROM customers WHERE username='%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}'}" == 1) {
					update control {
						Tmp-String-0 := "%{sql:UPDATE customers SET mac_address='%{Calling-Station-Id}' WHERE username='%{User-Name}' AND (mac_address IS NULL OR mac_address = '')}"
					}
				}
				
				# Check if the Calling-Station-Id matches any of the mac addresses
				if ("%{sql:SELECT IFNULL(FIND_IN_SET('%{Calling-Station-Id}', mac_address), 0) as is_found_status FROM customers WHERE username='%{User-Name}' AND created_by = '%{control:Tmp-Tenant-ID}'}" <= 0) {
					update reply {
						Reply-Message := 'Wrong Mac Address. Added '
						Framed-Pool := "%{control:Disabled-Pool}"
					}
					reject
				}
			}

			## Check Token User
			if("%{sql:SELECT COUNT(*) as token_found FROM token WHERE username='%{User-Name}'}" == 1){
		
				## query nas allow
				if("%{sql:SELECT allowanynas FROM settings WHERE id=1}" == 0){
					if("%{sql:SELECT nas.nasname FROM nas INNER JOIN token ON nas.id = token.nas_id WHERE token.username='%{User-Name}' AND token.nas_id != 0}" != "%{NAS-IP-Address}"){
						update reply {
							Reply-Message := 'NAS Not Allowed'
						}
						reject
					}        
				}
		
				update reply {
					Reply-Message := 'Token User Found'
				}
		
				## query user data check
				if("%{sql:SELECT IF(packages.dataqt = 1 AND packages.dataqtvol > 0 AND packages.data_quota_exceed_status = 1 AND packages.data_quota_exceed_type = 1 AND token.used_data_vol >= packages.dataqtvol, 1, 0) as qt_vol_con_status FROM token LEFT JOIN packages ON token.package_id = packages.id WHERE token.username='%{User-Name}'}" == 1){
					update reply {
						Reply-Message := 'Token Reached Data Volume'
					}
					reject
				}
		
				## Check Session Limit
				if("%{sql:SELECT IF(packages.sessionqt = 1 AND packages.sessiontime > 0 AND packages.session_quota_exceed_status = 1 AND packages.session_quota_exceed_type = 1 AND token.used_session_vol >= packages.sessiontime, 1, 0) as qt_session_con_status FROM token LEFT JOIN packages ON token.package_id = packages.id WHERE token.username='%{User-Name}'}" == 1){
					update reply {
						Reply-Message := 'Token Reached Session Limit'
					}
					reject
				}
			}
		}
	}

	authenticate {
		Auth-Type PAP {
			pap
		}
		Auth-Type CHAP {
			chap
		}

		Auth-Type MS-CHAP {
			mschap
		}
		mschap
		digest
		eap
	}

	preacct {
		preprocess

		acct_unique
		suffix
		files
	}

	accounting {
		unix
		sql
		exec
		attr_filter.accounting_response
	}

	session {
	#	radutmp

		#  See "Simultaneous Use Checking Queries" in mods-available/sql
		sql
	}

	post-auth {

		if (&control:Expired-Pool && &control:Expired-Pool != "") {
			# If Expired-Pool is set and is not empty, remove Framed-IP-Address and Framed-IP-Netmask
			update reply {
				Framed-IP-Address !* ANY
				Framed-IP-Netmask !* ANY
			}
		}

		# Check if Disabled-Pool exists and is not empty
		if (&control:Disabled-Pool && &control:Disabled-Pool != "") {
			# If Disabled-Pool is set and is not empty, remove Framed-IP-Address and Framed-IP-Netmask
			update reply {
				Framed-IP-Address !* ANY
				Framed-IP-Netmask !* ANY
			}
		}


		if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
			update reply {
				&User-Name !* ANY
			}
		}
		update {
			&reply: += &session-state:
		}

		reply_log
		sql
		exec

		#  Remove reply message if the response contains an EAP-Message
		remove_reply_message_if_eap

		Post-Auth-Type REJECT {
			sql
			attr_filter.access_reject
			eap
			remove_reply_message_if_eap
		}
		Post-Auth-Type Challenge {
			# remove_reply_message_if_eap
			# attr_filter.access_challenge.post-auth
		}

		Post-Auth-Type Client-Lost {
			# %{debug_attr:&session-state:TLS-Session-Information[*]}
			# %{debug_attr:&session-state:TLS-Session-Information[n]}
			# %{debug_attr:&session-state:Module-Failure-Message}
		}

		if (EAP-Key-Name && &reply:EAP-Session-Id) {
			update reply {
				&EAP-Key-Name := &reply:EAP-Session-Id
			}
		}
	}

	pre-proxy {
	}

	post-proxy {
		eap
	}
}
